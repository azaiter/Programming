{"notebook_name":"Math_223_Transformations_turnin.ipynb"}
"# Math 223 Homework 2: matrix multiplication and transformations"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"markdown"}
"At the beginning of this notebook, there is some explanation showing you how to use the plotting module in Julia.  When you originally open this notebook, all the output of all the cells will be removed.  __I strongly suggest to go through the notebook, reading each cell carefully, then pressing <kbd>Shift</kbd>-<kbd>Enter</kbd> to execute it, and observe the effects.  When you get to the end, you should be ready to do your own work.__ If you, at any time, want to go through the instructions again, __restart the kernel__ and start with the first cell, going through all the cells with <kbd>Shift</kbd>-<kbd>Enter</kbd> again. "︡{"metadata":{},"cell_type":"markdown"}
"## Setup\n\nWe will explore using matrices to transform objects on the Cartesian plane.  We will come back to this topic later with affine coordinates. \n\nFirst we will learn how to plot some objects on the Cartesian plane.\n\nIn order to visualize the transformation, we will use a Julia module that will let us plot points and polygons on a coordinate system. The following command will load such module.  Since the module code is located in the same folder as this notebook, we first need to add the folder to Julia's search path, so it will be able to find the module:"︡{"metadata":{},"cell_type":"markdown"}
"push!(LOAD_PATH, \".\")\nusing JSXGraph"︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","execution_count":1,"outputs":[]}
"This loads the module `JSXGraph` that will allow us to use the `jsxgraph` javascript library to plot geometrical figures in the browser. (If you want to use this module in your own notebooks and projects, let me know, I will help you get started.)"︡{"metadata":{},"cell_type":"markdown"}
"First we need to create a coordinate system, so called \"board\" in `jsxgraph` terminology.  We need to give the board a unique name that we will later use to refer to it, specify the boundaries of the \"window\" in Cartesian coordinates, in order of left, top, right, bottom, and give the window size in pixels, like so:"︡{"metadata":{},"cell_type":"markdown"}
"first_board = createBoard(\"board1\", -2, 8, 10, -4, 500, 500)"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/html":"<!DOCTYPE html>\n<html>\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"jsxgraph.css\" />\n        <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.99.3/jsxgraphcore.js\"></script>\n    </head>\n    <body>\n    <div id=\"box_board1\" class=\"jxgbox\" style=\"width:500px; height:500px;\"></div>\n    <script type=\"text/javascript\">\n        var board1 = JXG.JSXGraph.initBoard('box_board1', {boundingbox:[-2,8,10,-4], axis:true});\n    </script>\n    </body>\n</html>\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":"\"board1\""},"metadata":{},"execution_count":2}]}
"You should see a $500\\times 500$ pixel window to the Cartesian coordinate plane, showing the part of the plane for $-2 \\le x \\le 10$ and $-4 \\le y \\le 8$.  The variable `first_board` contains the string `\"board1\"`, which we will use to refer to this board later on.\n\n## Adding points\n\nNow we will add some points to the board.  Let's add the points $(-1,-1)$, $(1,3)$, $(4,2)$, $(7,6)$ and $(8,-3)$.  We will represent the points by a matrix in which every column represents one point: $$\\begin{bmatrix} -1 & 1 & 4 & 7 & 8\\\\ -1 & 3 & 2 & 6 & -3\\end{bmatrix}$$"︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"markdown"}
"P = [-1 1 4 7 8\n     -1 3 2 6 -3]"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":"2x5 Array{Int64,2}:\n -1  1  4  7   8\n -1  3  2  6  -3"},"metadata":{},"execution_count":3}]}
"Now we will add the points to the board.  The function `addPoints` takes the name of the board, a matrix with 2 rows representing the points, and a \"prefix\" that will be used for naming the points:"︡{"metadata":{},"cell_type":"markdown"}
"first_points = addPoints(first_board, P, \"pt\")"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board1_pt1 = board1.create('point',[-1,-1],{'fixed':true});\nvar board1_pt2 = board1.create('point',[1,3],{'fixed':true});\nvar board1_pt3 = board1.create('point',[4,2],{'fixed':true});\nvar board1_pt4 = board1.create('point',[7,6],{'fixed':true});\nvar board1_pt5 = board1.create('point',[8,-3],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":"JSXGraph.JSXThings(\"board1\",(\"pt1\",\"pt2\",\"pt3\",\"pt4\",\"pt5\"))"},"metadata":{},"execution_count":11}]}
"The variable `first_points` holds the list of the added points.  We will use the variable to refer to the points later on.  For example, we can change the way the points look.\n\nThe default appearance of points is red circles.  We can change that, for example we can make them look like green crosses:"︡{"metadata":{},"cell_type":"markdown"}
"setProperties(first_points, Dict(\"face\"=>\"'cross'\", \"color\"=>\"'green'\"))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard1_pt1.setProperty({face:'cross',color:'green'});\nboard1_pt2.setProperty({face:'cross',color:'green'});\nboard1_pt3.setProperty({face:'cross',color:'green'});\nboard1_pt4.setProperty({face:'cross',color:'green'});\nboard1_pt5.setProperty({face:'cross',color:'green'});\n</script>"},"metadata":{}}]}
"Note that because of the way the properties are passed from Julia to Javascript, the property _values_ must be in __both__ double quotes (`\"`) and single quotes (`'`), while the property _names_ should only be in regular double quotes (`\"`).\n\n## Adding a polygon\n\nNow we will create a polygon defined by those points.  The function `pointsToPolygon` receives the list of points, and a name that Javascript will use to refer to the polygon."︡{"metadata":{},"cell_type":"markdown"}
"first_poly = pointsToPolygon(first_points, \"poly1\")"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board1_poly1 = board1.create('polygon', [board1_pt1,board1_pt2,board1_pt3,board1_pt4,board1_pt5]);\n</script>\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":"JSXGraph.JSXThings(\"board1\",(\"poly1\",))"},"metadata":{},"execution_count":13}]}
"The polygon will be green by default.  Again, we can change its color by setting its properties:"︡{"metadata":{},"cell_type":"markdown"}
"setProperties(first_poly, Dict(\"color\"=>\"'yellow'\"))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard1_poly1.setProperty({color:'yellow'});\n</script>"},"metadata":{}}]}
"## Adding more points and polygons\n\nNow we will add another set of points and another polygon."︡{"metadata":{},"cell_type":"markdown"}
"P2 = [0 2 5 7\n      6 -1 3 7]\n\nnew_points = addPoints(first_board, P2, \"p2s\")\n\nsetProperties(new_points, Dict(\"face\"=>\"'diamond'\", \"color\"=>\"'purple'\"))\n\nnew_polygon = pointsToPolygon(new_points, \"poly2\")\n\nsetProperties(new_polygon, Dict(\"color\"=>\"'orchid'\"))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board1_p2s1 = board1.create('point',[0,6],{'fixed':true});\nvar board1_p2s2 = board1.create('point',[2,-1],{'fixed':true});\nvar board1_p2s3 = board1.create('point',[5,3],{'fixed':true});\nvar board1_p2s4 = board1.create('point',[7,7],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard1_p2s1.setProperty({face:'diamond',color:'purple'});\nboard1_p2s2.setProperty({face:'diamond',color:'purple'});\nboard1_p2s3.setProperty({face:'diamond',color:'purple'});\nboard1_p2s4.setProperty({face:'diamond',color:'purple'});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board1_poly2 = board1.create('polygon', [board1_p2s1,board1_p2s2,board1_p2s3,board1_p2s4]);\n</script>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard1_poly2.setProperty({color:'orchid'});\n</script>"},"metadata":{}}]}
"This adds another set of points to the board, changes their appearance to purple diamonds, adds a polygon defined by the points, and makes it 'orchid' color. Notice that the polygons are translucent, so you can see what is behind them, and on the overlap, the color is a combination of yellow and orchid.\n\nWe used different prefix (`p2s` instead of `pt`) for points and different name (`poly2` instead of `poly1`) for the polygon, so that Javascript that runs in the browser and does the actual displaying of the objects on the board will not confuse them with the points from the first set."︡{"metadata":{},"cell_type":"markdown"}
"----------------------\n\n## Your homework"︡{"metadata":{},"cell_type":"markdown"}
"Now you should be ready to do your homework.  Your goal will be to take the points $(0,0)$, $(1,0)$, $(1,1)$ and $(0,1)$, and the polygon they define, and transform them using a series of matrix multiplications to new sets of points and polygons.  You will plot the new points and polygon after each transformation.  You will the try to summarize what happened.\n\nThe points will be represented by the matrix $$\\begin{bmatrix} 0 & 1 & 1 & 0 \\\\ 0 & 0 & 1 & 1 \\end{bmatrix}$$"︡{"metadata":{},"cell_type":"markdown"}
"PTS = [0 1 1 0\n       0 0 1 1]"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":"2x4 Array{Int64,2}:\n 0  1  1  0\n 0  0  1  1"},"metadata":{},"execution_count":16}]}
"You will use three transformation matrices:\n\n*   The first will be a simple diagonal matrix $$T1 = \\begin{bmatrix} 2 & 0 \\\\ 0 & 3 \\end{bmatrix}$$\n\n*   The second will be $$T2 = \\begin{bmatrix} 1 & 1 \\\\ 0 & 1 \\end{bmatrix}$$\n\n*   The third will be the matrix $$T3 = \\begin{bmatrix} \\cos\\alpha & -\\sin\\alpha \\\\ \\sin\\alpha & \\cos\\alpha \\end{bmatrix}$$ for $\\alpha = \\pi/6$."︡{"metadata":{},"cell_type":"markdown"}
"The matrices can be entered in Julia code for example like this (to enter $\\alpha$ in Julia code cell, type `\\alpha` and press the <kbd>Tab</kbd> key immediately after it.  To enter $\\pi$,  type `\\pi` and press <kbd>Tab</kbd>.  If that does not work, make sure that your notebook is connected to a running Julia kernel. You may have to restart the kernel if it is not running - the server automatically stops kernels that are idle for a while, to save resources.  You can also simply use `alpha` and `pi` instead, it will not look so nice, but it will be easier to type):"︡{"metadata":{},"cell_type":"markdown"}
"T1 = [2 0\n0 3]\n\nT2 = [1 1; 0 1]\n\nα = π/6\n\nT3 = [cos(α) -sin(α)\n    sin(α) cos(α)]"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":"2x2 Array{Float64,2}:\n 0.866025  -0.5     \n 0.5        0.866025"},"metadata":{},"execution_count":17}]}
"I will get you started, and your task will be to finish the work.\n\nFirst let's create a new board and plot the original points and the original polygon:"︡{"metadata":{},"cell_type":"markdown"}
"board2 = createBoard(\"board2\", -2, 6, 6, -2, 500, 500)\norig_points = addPoints(board2, PTS, \"opts\")\norig_poly = pointsToPolygon(orig_points, \"opoly\")"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/html":"<!DOCTYPE html>\n<html>\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"jsxgraph.css\" />\n        <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.99.3/jsxgraphcore.js\"></script>\n    </head>\n    <body>\n    <div id=\"box_board2\" class=\"jxgbox\" style=\"width:500px; height:500px;\"></div>\n    <script type=\"text/javascript\">\n        var board2 = JXG.JSXGraph.initBoard('box_board2', {boundingbox:[-2,6,6,-2], axis:true});\n    </script>\n    </body>\n</html>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board2_opts1 = board2.create('point',[0,0],{'fixed':true});\nvar board2_opts2 = board2.create('point',[1,0],{'fixed':true});\nvar board2_opts3 = board2.create('point',[1,1],{'fixed':true});\nvar board2_opts4 = board2.create('point',[0,1],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board2_opoly = board2.create('polygon', [board2_opts1,board2_opts2,board2_opts3,board2_opts4]);\n</script>\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":"JSXGraph.JSXThings(\"board2\",(\"opoly\",))"},"metadata":{},"execution_count":18}]}
"Now we will calculate the first transformation, and add the new points and polygon to the plot.  We will change the properties of the new objects, so they will be clearly distinguishable from the old objects."︡{"metadata":{},"cell_type":"markdown"}
"PTS1 = T1*PTS\n\nt1_points = addPoints(board2, PTS1, \"t1pts\")\nt1_poly = pointsToPolygon(t1_points, \"t1poly\")\nsetProperties(combine(t1_points, t1_poly), Dict(\"color\"=>\"'yellow'\", \"size\"=>2))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board2_t1pts1 = board2.create('point',[0,0],{'fixed':true});\nvar board2_t1pts2 = board2.create('point',[2,0],{'fixed':true});\nvar board2_t1pts3 = board2.create('point',[2,3],{'fixed':true});\nvar board2_t1pts4 = board2.create('point',[0,3],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board2_t1poly = board2.create('polygon', [board2_t1pts1,board2_t1pts2,board2_t1pts3,board2_t1pts4]);\n</script>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard2_t1pts1.setProperty({color:'yellow',size:2});\nboard2_t1pts2.setProperty({color:'yellow',size:2});\nboard2_t1pts3.setProperty({color:'yellow',size:2});\nboard2_t1pts4.setProperty({color:'yellow',size:2});\nboard2_t1poly.setProperty({color:'yellow',size:2});\n</script>"},"metadata":{}}]}
"Now it is your turn.  You will calculate `PTS2` by multiplying `PTS1` by the transformation matrix `T2` from the left, and add the resulting points and the corresponding polygon to the `board2`.  Then you will transform `PTS2` by the matric `T3`, getting the points `PTS3`.  You will again add those to the plot, together with the corresponding polygon.  I suggest to set the properties of each new set of points and polygon, so you can clearly tell which one is which.\n\nAt the end, _create a markdown cell, and describe how each of the three transformations worked_.\n\n__Let me know if you need any help!__  Send me an email, I can always look at your unfinished notebook and try to see what the problem is, and give you some hints or advice."︡{"metadata":{},"cell_type":"markdown"}
"PTS2 = T2*PTS1\n\nt2_points = addPoints(board2, PTS2, \"t2pts\")\nt2_poly = pointsToPolygon(t2_points, \"t2poly\")\nsetProperties(combine(t2_points, t2_poly), Dict(\"color\"=>\"'green'\", \"size\"=>2))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board2_t2pts1 = board2.create('point',[0,0],{'fixed':true});\nvar board2_t2pts2 = board2.create('point',[2,0],{'fixed':true});\nvar board2_t2pts3 = board2.create('point',[5,3],{'fixed':true});\nvar board2_t2pts4 = board2.create('point',[3,3],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board2_t2poly = board2.create('polygon', [board2_t2pts1,board2_t2pts2,board2_t2pts3,board2_t2pts4]);\n</script>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard2_t2pts1.setProperty({color:'green',size:2});\nboard2_t2pts2.setProperty({color:'green',size:2});\nboard2_t2pts3.setProperty({color:'green',size:2});\nboard2_t2pts4.setProperty({color:'green',size:2});\nboard2_t2poly.setProperty({color:'green',size:2});\n</script>"},"metadata":{}}]}
"PTS3 = T3*PTS2\n\nt3_points = addPoints(board2, PTS3, \"t2pts\")\nt3_poly = pointsToPolygon(t3_points, \"t2poly\")\nsetProperties(combine(t3_points, t3_poly), Dict(\"color\"=>\"'red'\", \"size\"=>2))"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nvar board2_t2pts1 = board2.create('point',[0.0,0.0],{'fixed':true});\nvar board2_t2pts2 = board2.create('point',[1.7320508075688774,0.9999999999999999],{'fixed':true});\nvar board2_t2pts3 = board2.create('point',[2.8301270189221936,5.098076211353316],{'fixed':true});\nvar board2_t2pts4 = board2.create('point',[1.0980762113533162,4.098076211353316],{'fixed':true});\n</script>"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\n    var board2_t2poly = board2.create('polygon', [board2_t2pts1,board2_t2pts2,board2_t2pts3,board2_t2pts4]);\n</script>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<script type=\"text/javascript\">\nboard2_t2pts1.setProperty({color:'red',size:2});\nboard2_t2pts2.setProperty({color:'red',size:2});\nboard2_t2pts3.setProperty({color:'red',size:2});\nboard2_t2pts4.setProperty({color:'red',size:2});\nboard2_t2poly.setProperty({color:'red',size:2});\n</script>"},"metadata":{}}]}
"<b>in first transformation : multiplied first row by 2 and second row by 3 resulted in expanding the space between points, so that the shape got larger.<br>\nin second transformation: in addition to first one, it shifted the upper points \"H and G\" in the x axis by 3, resulting in an x skew.<br>\nin third transformation: in addition to the second one, it applied a 30 dgrees rotation.\n"︡{"metadata":{},"cell_type":"markdown"}
"<span style=\"color:green\">Good job!</span>"︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"markdown"}
""︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","execution_count":null,"outputs":[]}
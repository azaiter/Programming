{"kernelspec":{"display_name":"Julia","language":"julia","name":"julia-0.4"},"language_info":{"file_extension":".jl","mimetype":"application/julia","name":"julia","version":"0.4.1"}}
{"cell_type":"markdown","metadata":{"collapsed":false},"source":"# Installing Plotting Packages\n\nThis homework is a bit different.  It has nothing to do with matrix algebra.  Its purpose is to help you install appropriate plotting \npackages into your Julia project, so you will be able to plot points in the next homework."}
{"cell_type":"markdown","metadata":{},"source":"There are two main plotting packages for Julia.  I am testing which one of them is more appropriate to use in \na class setting like ours.  You have been selected to use the `PyPlot` package, which is a Julia's interface to the \npowerful python plotting package `Matplotlib`.  This notebook will guide you through the installation of the package.\n\n_note:_ You are using a free SageMathCloud account, which normally disables all network access.  You have to pay a monthly \nfee in order to have an access to the internet from your projects.  I used some of my quota to enable network access in \nyour project in order for you to be able to install packages."}
{"cell_type":"markdown","metadata":{},"source":"## Instaling PyPlot\n\nTo install pyplot, you need to execute the following code cell.  It will produce a lot of output, with messages about cloning packages from GitHub and installing \npackages.   You will know that the process is finished when the name of the cell changes from `In[*]` to something like `In[1]`, and the smalled filled circle next \nto the word \"Julia\" in the upper right corner becomes empty.\n\nAll the messages should be in the \"INFO\" category.  If you see any warnings or errors, or anything else indicating that the installation may not have gone through\nwell, __please let me know__, either by email or using the chat feature in SageMathCloud.\n\nIf `PyPlot` is already installed and up to date, you will see a single message, saying \"Nothing to be done\"."}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"INFO: Initializing package repository /projects/c317a592-b93d-49f5-b80e-d8a1279cde7a/.julia/v0.4\nINFO: Cloning METADATA from git://github.com/JuliaLang/METADATA.jl\nINFO: Cloning cache of BinDeps from git://github.com/JuliaLang/BinDeps.jl.git\nINFO: Cloning cache of ColorTypes from git://github.com/JuliaGraphics/ColorTypes.jl.git\nINFO: Cloning cache of Colors from git://github.com/JuliaGraphics/Colors.jl.git\nINFO: Cloning cache of Compat from git://github.com/JuliaLang/Compat.jl.git\nINFO: Cloning cache of Conda from git://github.com/Luthaf/Conda.jl.git\nINFO: Cloning cache of Dates from git://github.com/quinnj/Dates.jl.git\nINFO: Cloning cache of FixedPointNumbers from git://github.com/JeffBezanson/FixedPointNumbers.jl.git\nINFO: Cloning cache of JSON from git://github.com/JuliaLang/JSON.jl.git\nINFO: Cloning cache of LaTeXStrings from git://github.com/stevengj/LaTeXStrings.jl.git\nINFO: Cloning cache of PyCall from git://github.com/stevengj/PyCall.jl.git\nINFO: Cloning cache of PyPlot from git://github.com/stevengj/PyPlot.jl.git\nINFO: Cloning cache of Reexport from git://github.com/simonster/Reexport.jl.git\nINFO: Cloning cache of SHA from git://github.com/staticfloat/SHA.jl.git\nINFO: Cloning cache of URIParser from git://github.com/JuliaWeb/URIParser.jl.git\nINFO: Installing BinDeps v0.3.21\nINFO: Installing ColorTypes v0.2.2\nINFO: Installing Colors v0.6.3\nINFO: Installing Compat v0.7.13\nINFO: Installing Conda v0.1.9\nINFO: Installing Dates v0.4.4\nINFO: Installing FixedPointNumbers v0.1.2\nINFO: Installing JSON v0.5.0\nINFO: Installing LaTeXStrings v0.1.6\nINFO: Installing PyCall v1.4.0\nINFO: Installing PyPlot v2.1.1\nINFO: Installing Reexport v0.0.3\nINFO: Installing SHA v0.1.2\nINFO: Installing URIParser v0.1.3\nINFO: Building PyCall\nINFO: Recompiling stale cache file /projects/c317a592-b93d-49f5-b80e-d8a1279cde7a/.julia/lib/v0.4/Compat.ji for module Compat.\nINFO: Recompiling stale cache file /projects/c317a592-b93d-49f5-b80e-d8a1279cde7a/.julia/lib/v0.4/JSON.ji for module JSON.\nINFO: PyCall is using python (Python 2.7.10) at /projects/sage/sage-6.10/local/bin/python, libpython = /projects/sage/sage-6.10/local/lib/libpython2.7.so\nINFO: Package database updated\n"}],"source":"Pkg.add(\"PyPlot\")"}
{"cell_type":"markdown","metadata":{},"source":"## Testing PyPlot\n\nBefore testing `PyPlot` after it was installed, you need to __restart the notebook__, so that some packages that are used by the notebook and that were updated \nwhen you installed `PyPlot` get refreshed.   To do that, click on \"Kernel\" in the notebook menu above, and choose \"Restart\".  Choose \"Clear all outputs and restart\"\nfrom the dialog that pops up.  After the kernel restarts, execute the following input cell.  \n\nIt will take a while, and you will see some messages about precompiling modules.  Again, if there any errors or warnings, __let me know__!"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"INFO: Precompiling module PyPlot...\n"}],"source":"using PyPlot\n\nion()"}
{"cell_type":"markdown","metadata":{},"source":"Now you can test plotting.  The following cell should produce a plot showing a green polygonal line passing through the points $(1,1)$, $(2,0)$, $(3,2)$ and $(4,1)$:"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::03ac86fe-127c-47d7-bca0-c2be1371f223","text/plain":"PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7fe9284a7390>)"},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":"1-element Array{Any,1}:\n PyObject <matplotlib.lines.Line2D object at 0x7fe9280cc750>"},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":"plot([1,2,3,4], [1,0,2,1], \"-og\")"}
{"cell_type":"markdown","metadata":{},"source":"Again, if something goes wrong and you do not see the plot, __let me know__!\n\nYou can further experiment with plotting.  There are bunch of examples of `PyPlot` plots at [this gist](https://gist.github.com/gizmaa/7214002)."}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::c6c15c28-bd0d-4b04-8fb1-ee050cc7f50e","text/plain":"PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7fe922a7f450>)"},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"smc-blob::d3482ce3-e1c2-46fb-90c2-c1f28a3f7ded","text/plain":"PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7fe92815a690>)"},"metadata":{},"output_type":"display_data"}],"source":"#################\n#  Create Data  #\n#################\ntheta = [0:2pi/30:2pi;]\nr = rand(length(theta))\nwidth = 2pi/length(theta) # Desired width of each bar in the bar plot\n\n##########################\n##  Windrose Line Plot  ##\n##########################\nfig = figure(\"pyplot_windrose_lineplot\",figsize=(10,10)) # Create a new figure\nax = axes(polar=\"true\") # Create a polar axis\ntitle(\"Wind Rose - Line\")\np = plot(theta,r,linestyle=\"-\",marker=\"None\") # Basic line plot\n\ndtheta = 10\nax[:set_thetagrids]([0:dtheta:360-dtheta;]) # Show grid lines from 0 to 360 in increments of dtheta\nax[:set_theta_zero_location](\"N\") # Set 0 degrees to the top of the plot\nax[:set_theta_direction](-1) # Switch to clockwise\nfig[:canvas][:draw]() # Update the figure\n\n#########################\n##  Windrose Bar Plot  ##\n#########################\nfig = figure(\"pyplot_windrose_barplot\",figsize=(10,10)) # Create a new figure\nax = axes(polar=\"true\") # Create a polar axis\ntitle(\"Wind Rose - Bar\")\nb = bar(theta,r,width=width) # Bar plot\n\ndtheta = 10\nax[:set_thetagrids]([0:dtheta:360-dtheta;]) # Show grid lines from 0 to 360 in increments of dtheta\nax[:set_theta_zero_location](\"N\") # Set 0 degrees to the top of the plot\nax[:set_theta_direction](-1) # Switch to clockwise\nfig[:canvas][:draw]() # Update the figure"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}